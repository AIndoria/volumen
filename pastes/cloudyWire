mod options;
mod utils;

use std::{
    fs::{create_dir_all, File},
    io::{Read, Write},
    net::{TcpListener, TcpStream},
    sync::Arc,
    thread,
};

use anyhow::{bail, Context, Result};
use structopt::StructOpt;

use options::Opt;

fn main() -> Result<()> {
    let opt: Arc<Opt> = Arc::new(Opt::from_args());

    create_dir_all(&opt.output).context(format!(
        "Failed to create directory `{}`",
        opt.output.display()
    ))?;
    match utils::dir_is_writable(&opt.output) {
        Ok(false) | Err(_) => {
            bail!(format!("`{}` is not writeable", opt.output.display()));
        }
        _ => {}
    }

    let listener = TcpListener::bind(("0.0.0.0", 9999))?;

    for stream in listener.incoming() {
        if stream.is_err() {
            continue;
        }
        let stream = stream.unwrap();
        let opt = Arc::clone(&opt);
        thread::spawn(move || handle_client(stream, opt));
    }

    Ok(())
}

fn handle_client(mut stream: TcpStream, settings: Arc<Opt>) {
    let mut buffer = vec![0; settings.buffer_size];

    let read = stream.read(&mut buffer).unwrap();
